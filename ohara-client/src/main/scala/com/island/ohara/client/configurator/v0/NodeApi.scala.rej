diff a/ohara-client/src/main/scala/com/island/ohara/client/configurator/v0/NodeApi.scala b/ohara-client/src/main/scala/com/island/ohara/client/configurator/v0/NodeApi.scala	(rejected hunks)
@@ -34,7 +34,11 @@ object NodeApi {
   implicit val NODE_UPDATE_JSON_FORMAT: RootJsonFormat[Update] =
     JsonRefiner[Update].format(jsonFormat4(Update)).requireConnectionPort("port").rejectEmptyString().refine
 
-  case class Creation(hostname: String, port: Int, user: String, password: String, tags: Set[String])
+  case class Creation(hostname: String,
+                      port: Option[Int],
+                      user: Option[String],
+                      password: Option[String],
+                      tags: Set[String])
       extends CreationRequest {
     override def name: String = hostname
   }
@@ -62,13 +66,25 @@ object NodeApi {
     * NOTED: the field "services" is filled at runtime. If you are in testing, it is ok to assign empty to it.
     */
   case class Node(hostname: String,
-                  port: Int,
-                  user: String,
-                  password: String,
+                  port: Option[Int],
+                  user: Option[String],
+                  password: Option[String],
                   services: Seq[NodeService],
                   lastModified: Long,
                   tags: Set[String])
       extends Data {
+    private[this] def msg(key: String) = s"the $key is required if your Ohara Configurator is running in SSH mode"
+
+    /**
+      * K8s mode does not need port, user and password so Restful APIs don't require those information. In order to
+      * simplify code base, we don't use another class, which must have port, user and password, for ssh mode.
+      * Hence, those helper methods offer the simple way to "take" required information or generate a exception with
+      * useful error message.
+      * @return port or exception
+      */
+    def _port: Int = port.getOrElse(throw new NoSuchElementException(msg("port")))
+    def _user: String = user.getOrElse(throw new NoSuchElementException(msg("user")))
+    def _password: String = password.getOrElse(throw new NoSuchElementException(msg("password")))
     override def name: String = hostname
     override def kind: String = "node"
   }
@@ -135,8 +151,8 @@ object NodeApi {
     def request: Request = new Request {
       private[this] var hostname: String = _
       private[this] var port: Option[Int] = None
-      private[this] var user: String = _
-      private[this] var password: String = _
+      private[this] var user: Option[String] = None
+      private[this] var password: Option[String] = _
       private[this] var tags: Set[String] = _
       override def hostname(hostname: String): Request = {
         this.hostname = CommonUtils.requireNonEmpty(hostname)
@@ -162,16 +178,16 @@ object NodeApi {
 
       override private[v0] def creation: Creation = Creation(
         hostname = CommonUtils.requireNonEmpty(hostname),
-        user = CommonUtils.requireNonEmpty(user),
-        password = CommonUtils.requireNonEmpty(password),
-        port = port.map(CommonUtils.requireConnectionPort).getOrElse(throw new NullPointerException),
+        port = port.map(CommonUtils.requireConnectionPort),
+        user = user.map(CommonUtils.requireNonEmpty),
+        password = password.map(CommonUtils.requireNonEmpty),
         tags = if (tags == null) Set.empty else tags
       )
 
       override private[v0] def update: Update = Update(
         port = port.map(CommonUtils.requireConnectionPort),
-        user = Option(user).map(CommonUtils.requireNonEmpty),
-        password = Option(password).map(CommonUtils.requireNonEmpty),
+        user = user.map(CommonUtils.requireNonEmpty),
+        password = password.map(CommonUtils.requireNonEmpty),
         tags = Option(tags)
       )
 
