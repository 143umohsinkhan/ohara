/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.island.ohara.client.configurator

import com.island.ohara.common.setting.{ConnectorKey, ObjectKey, SettingDef, TopicKey}
import com.island.ohara.common.util.CommonUtils
import spray.json.{JsNull, JsValue, RootJsonFormat}

package object v0 {

  /**
    * the default group to all objects.
    * the group is useful to Ohara Manager. However, in simple case, the group is a bit noisy so we offer the default group to all objects when
    * input group is ignored.
    *
    * This field is protected since it is a "default" to all APIs scopes than a "global" default to whole project.
    * However, each APIs scope may have custom default value of group.
    */
  private[v0] val GROUP_DEFAULT: String = "default"
  val GROUP_KEY: String = "group"

  /**
    * Noted: there are other two definition having "name"
    * 1) ConnectorDefUtils.CONNECTOR_NAME_DEFINITION
    * 2) StreamDefinitions.NAME_DEFINITION
    */
  val NAME_KEY: String = "name"

  /**
    * Noted: there are other two definition having "tags""
    * 1) ConnectorDefUtils.TAGS_DEFINITION
    * 2) StreamDefinitions.TAGS_DEFINITION
    */
  val TAGS_KEY: String = "tags"

  val NODE_NAMES_KEY: String = "nodeNames"
  val IMAGE_NAME_KEY: String = "imageName"
  val CLUSTER_KEY: String = "cluster"
  val FORCE_KEY: String = "force"
  val START_COMMAND: String = "start"
  val STOP_COMMAND: String = "stop"
  val PAUSE_COMMAND: String = "pause"
  val RESUME_COMMAND: String = "resume"

  /**
    * There is no length limit for docker container name in current support version (18.09), but the k8s
    * docs did say that the maximum length is 253:
    * <p>https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    * <p>
    * Since we are living in a complex world with a lot of unpredictable situations, the name length here
    * is attempt to give a suitable and readable chars for most cases.
    */
  val LIMIT_OF_NAME_LENGTH: Int = 20

  /**
    * In this APIs we have to integrate json format between scala (spray-json) and java (jackson).
    * The JsNull generated by spray-json confuse jackson to generate many "null" object. We remove the key related to
    * JsNull in order to avoid passing null to jackson.
    */
  private[v0] def noJsNull(fields: Map[String, JsValue]): Map[String, JsValue] = fields.filter {
    _._2 match {
      case JsNull => false
      case _      => true
    }
  }

  private[v0] def noJsNull(jsValue: JsValue): Map[String, JsValue] = noJsNull(jsValue.asJsObject.fields)

  private[v0] implicit val OBJECT_KEY_FORMAT: RootJsonFormat[ObjectKey] = JsonRefiner[ObjectKey]
    .format(new RootJsonFormat[ObjectKey] {
      import spray.json._
      override def write(obj: ObjectKey): JsValue = ObjectKey.toJsonString(obj).parseJson
      override def read(json: JsValue): ObjectKey = ObjectKey.toObjectKey(json.toString())
    })
    .nullToString(GROUP_KEY, () => GROUP_DEFAULT)
    .rejectEmptyString()
    .refine

  implicit val TOPIC_KEY_FORMAT: RootJsonFormat[TopicKey] = JsonRefiner[TopicKey]
    .format(new RootJsonFormat[TopicKey] {
      import spray.json._
      override def write(obj: TopicKey): JsValue = try TopicKey.toJsonString(obj).parseJson
      catch {
        case e: Throwable =>
          throw DeserializationException(
            msg = e.getMessage,
            cause = e,
            fieldNames = List("group", "name")
          )
      }
      override def read(json: JsValue): TopicKey = TopicKey.toTopicKey(json.toString())
    })
    .nullToString(GROUP_KEY, () => TopicApi.GROUP_DEFAULT)
    .rejectEmptyString()
    .refine

  private[v0] implicit val CONNECTOR_KEY_FORMAT: RootJsonFormat[ConnectorKey] = JsonRefiner[ConnectorKey]
    .format(new RootJsonFormat[ConnectorKey] {
      import spray.json._
      override def write(obj: ConnectorKey): JsValue = try ConnectorKey.toJsonString(obj).parseJson
      catch {
        case e: Throwable =>
          throw DeserializationException(
            msg = e.getMessage,
            cause = e,
            fieldNames = List("group", "name")
          )
      }
      override def read(json: JsValue): ConnectorKey = ConnectorKey.toConnectorKey(json.toString())
    })
    .nullToString(GROUP_KEY, () => ConnectorApi.GROUP_DEFAULT)
    .rejectEmptyString()
    .refine

  /**
    * exposed to configurator
    */
  private[v0] implicit val SETTING_DEFINITION_JSON_FORMAT: RootJsonFormat[SettingDef] =
    new RootJsonFormat[SettingDef] {
      import spray.json._
      override def read(json: JsValue): SettingDef = SettingDef.ofJson(json.toString())

      override def write(obj: SettingDef): JsValue = obj.toJsonString.parseJson
    }

  /**
    * use basic check rules of creation request for json refiner.
    * 1) reject any empty string.
    * 2) nodeName cannot use "start" and "stop" keywords.
    * 3) nodeName cannot be empty array.
    * 4) imageName will use {defaultImage} if not defined.
    * 5) name must satisfy the regex [a-z0-9] and length <= 20
    * 6) name will use randomString if not defined.
    * 7) tags will use empty map if not defined.
    * 8) group must satisfy the regex [a-z0-9] and length <= 20
    * 9) group will use GROUP_DEFAULT if not defined.
    * @param defaultImage this cluster default images
    * @param defaultGroup this cluster default group. Different type of cluster may have different default group, so
    *                     we open a door for them
    * @tparam T type of creation
    * @return json refiner object
    */
  private[v0] def basicRulesOfCreation[T <: ClusterCreationRequest](defaultImage: String,
                                                                    defaultGroup: String): JsonRefiner[T] =
    JsonRefiner[T]
    // for each field, we should reject any empty string
      .rejectEmptyString()
      // cluster creation should use the default image of current version
      .nullToString(IMAGE_NAME_KEY, defaultImage)
      //-------------------------------------- "nodeNames" rules ---------------------------------//
      .arrayRestriction(NODE_NAMES_KEY)
      // we use the same sub-path for "node" and "actions" urls:
      // xxx/cluster/{name}/{node}
      // xxx/cluster/{name}/[start|stop]
      // the "actions" keywords must be avoided in nodeNames parameter
      .rejectKeyword(START_COMMAND)
      .rejectKeyword(STOP_COMMAND)
      // the node names can't be empty
      .rejectEmpty()
      .toRefiner
      //-------------------------------------- "name" rules --------------------------------------//
      // we random a default name for this cluster. the
      .nullToString(NAME_KEY, () => CommonUtils.randomString(LIMIT_OF_NAME_LENGTH / 2))
      .stringRestriction(NAME_KEY)
      .withNumber()
      .withLowerCase()
      .withLengthLimit(LIMIT_OF_NAME_LENGTH)
      .toRefiner
      //-------------------------------------- "group" rules -------------------------------------//
      .nullToString(GROUP_KEY, () => defaultGroup)
      .stringRestriction(GROUP_KEY)
      .withNumber()
      .withLowerCase()
      .withLengthLimit(LIMIT_OF_NAME_LENGTH)
      .toRefiner
      // default is empty tags
      .nullToEmptyObject(TAGS_KEY)
      // nodeNames is the only required field in creating cluster, add the requirement for it
      .requireKey(NODE_NAMES_KEY)

  /**
    * use basic check rules of update request for json refiner.
    * 1) reject any empty string.
    * 2) nodeName cannot use "start" and "stop" keywords.
    * 3) nodeName cannot be empty array.
    * @tparam T type of update
    * @return json refiner object
    */
  private[v0] def basicRulesOfUpdate[T <: ClusterUpdateRequest]: JsonRefiner[T] = JsonRefiner[T]
  // for each field, we should reject any empty string
    .rejectEmptyString()
    //-------------------------------------- "nodeNames" rules ---------------------------------//
    .arrayRestriction(NODE_NAMES_KEY)
    // we use the same sub-path for "node" and "actions" urls:
    // xxx/cluster/{name}/{node}
    // xxx/cluster/{name}/[start|stop]
    // the "actions" keywords must be avoided in nodeNames parameter
    .rejectKeyword(START_COMMAND)
    .rejectKeyword(STOP_COMMAND)
    // the node names can't be empty
    .rejectEmpty()
    .toRefiner
}
