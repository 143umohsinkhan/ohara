apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: 'scala'

dependencies {
  implementation libs.commonsNet
  implementation libs.commonsLang
  implementation libs.scala
  implementation libs.scalaLogging
  implementation libs.slf4jApi
  implementation libs.slf4jlog4j
  implementation libs.akkaStream
  implementation libs.sprayJson
  testImplementation libs.scalatest
  testImplementation libs.mockito
  testImplementation libs.junit
}

def exec(String[] args) {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine args
    standardOutput = stdout
  }
  return stdout.toString().replaceAll("\n", "")
}

def hasGit() {
  return exec("which", "git")
}

def user() {
  try {
    if (hasGit()) return exec("git", "config", "user.name")
    else return exec("whoami")
  } catch (Throwable e) {
    // if git's user is not set, git will return exit code 1
    return exec("whoami")
  }
}

def revision() {
  try {
    if (hasGit()) return exec("git", "log", "-1", "--no-show-signature", "--pretty=format:%H")
    else return "Unknown"
  } catch (Throwable e) {
    // if git's user is not set, git will return exit code 1
    return "Unknown"
  }
}

def date() {
  return exec("date")
}

task initializer {
  doLast {
    def file = new File("$projectDir" + "/src/main/scala/com/island/ohara/util/VersionUtil.scala")
    if (file.exists()) file.delete()
    def writer = new FileWriter(file)
    try {
      def code = """package com.island.ohara.util

object VersionUtil {
  val VERSION: String = \"${project.version}\"
  val USER: String = \"${user()}\"
  val REVISION: String = \"${revision()}\"
  val DATE: String = \"${date()}\"

  def main(args: Array[String]): Unit = {
    println(s\"ohara \$VERSION\")
    println(s\"revision=\$REVISION\")
    println(s\"Compiled by \$USER on \$DATE\")
  }
}
"""
      writer.write(code)
    } finally {
      writer.close()
    }
  }
}

/**
 * Generating VersionUtil must run before compileJava.
 */
tasks.matching { it.name != 'initializer' && it.name == "compileJava"}.all { Task task ->
  task.dependsOn initializer
}
