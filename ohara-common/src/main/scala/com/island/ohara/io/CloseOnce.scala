package com.island.ohara.io

import java.util.concurrent.atomic.AtomicBoolean

import com.typesafe.scalalogging.Logger

import scala.util.{Failure, Success, Try}

/**
  * A framework to implement the auto-close.
  * see TestCloseOnce for examples.
  */
trait CloseOnce extends AutoCloseable {
  private[this] val closed = new AtomicBoolean(false)

  /**
    * Do what you want to do when calling closing.
    */
  protected def doClose(): Unit

  /**
    * a helper method to check whether this object have been closed
    */
  def checkClose(): Unit = if (isClosed) throw new IllegalStateException(s"${this.getClass.getName} have closed")

  /**
    * @return true if this object have been closed
    */
  def isClosed: Boolean = closed.get

  final override def close(): Unit = if (closed.compareAndSet(false, true)) doClose()
}

object CloseOnce {
  private[this] lazy val logger = Logger(getClass.getName)

  /**
    * Close the non-null object and swallow/throw the exception
    * @param closeable nullable object
    * @param swallow true if you don't want to see the exception.
    */
  def close(closeable: AutoCloseable, swallow: Boolean = false): Unit = {
    try {
      if (closeable != null) {
        closeable.close()
      }
    } catch {
      case e: Throwable => if (swallow) logger.error("fail to close object", e) else throw e
    }
  }

  /**
    * Not all releaseable object are the subclass of AutoCloseable. This method allow caller to implement their custom "release behavior".
    * @param generator used to generate the releaseable object
    * @param worker handler the releaseable object
    * @param closer used to release the releaseable object
    * @tparam A closeable object
    * @tparam B worker
    * @return the object generated by worker
    */
  def doFinally[A, B](generator: => A)(worker: A => B)(closer: A => Unit): B = {
    Try(generator) match {
      case Success(obj) => {
        try worker(obj)
        finally closer(obj)
      }
      case Failure(e) => throw e
    }
  }

  /**
    * Simulate the try-with-resources. The object generated by the generator will be closed automatually after wroker have completed. And then
    * the object returned by worker will be returned to caller.
    * @param generator used to generate the closeable object
    * @param worker handler the closeable object
    * @tparam A closeable object
    * @tparam B worker
    * @return the object generated by worker
    */
  def doClose[A <: java.lang.AutoCloseable, B](generator: => A)(worker: A => B): B = {
    Try(generator) match {
      case Success(obj) => {
        try worker(obj)
        finally obj.close()
      }
      case Failure(e) => throw e
    }
  }
}
