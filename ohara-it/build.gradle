apply from: "$rootDir/gradle/dependencies.gradle"

/**
 * Noted: this module should NOT have any production code!!! by chia
 */
dependencies {
  /**
   * scala plugin complains that we don't put scala library in production scope... by chia
   */
  implementation libs.scala
  testImplementation libs.scalaLogging
  testImplementation libs.sprayJson
  testImplementation libs.kafkaConnectRuntime
  // our it env use postgresql
  testImplementation libs.postgresql
  testImplementation project(':ohara-common')
  testImplementation project(':ohara-client')
  testImplementation project(':ohara-kafka')
  testImplementation project(':ohara-configurator')
  testImplementation project(':ohara-ftp-connector')
  testImplementation project(':ohara-jdbc-connector')
  testImplementation project(':ohara-hdfs-connector')
  testImplementation project(':ohara-agent')
  testImplementation project(':ohara-testing-util')
  /**
   * The Hadoop use jersey 1.x, but the Kafka use jersey 2.x so jar conflict
   *
   * Solve running Kafka Connect mini cluster failed. OHARA-103
   */
  testImplementation (libs.hadoopCommon) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  testImplementation (libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation project(":ohara-testing-util").sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.junit
  testImplementation libs.sshd
  testImplementation libs.akkaStream
}


test {
  String FTP_SERVER = "ohara.it.ftp"
  if(project.hasProperty(FTP_SERVER)) environment FTP_SERVER, project.getProperty(FTP_SERVER)

  String DB_SERVER = "ohara.it.db"
  if(project.hasProperty(DB_SERVER)) environment DB_SERVER, project.getProperty(DB_SERVER)

  String BROKERS = "ohara.it.brokers"
  if(project.hasProperty(BROKERS)) environment BROKERS, project.getProperty(BROKERS)

  String WORKERS = "ohara.it.workers"
  if(project.hasProperty(WORKERS)) environment WORKERS, project.getProperty(WORKERS)

  String DOCKER = "ohara.it.docker"
  if(project.hasProperty(DOCKER)) environment DOCKER, project.getProperty(DOCKER)

  // required by TestLoadCustomJarToWorkerCluster
  String PUBLIC_HOSTNAME= "ohara.it.hostname"
  if(project.hasProperty(PUBLIC_HOSTNAME)) environment PUBLIC_HOSTNAME, project.getProperty(PUBLIC_HOSTNAME)

  // required by TestLoadCustomJarToWorkerCluster
  String PUBLIC_PORT = "ohara.it.port"
  if(project.hasProperty(PUBLIC_PORT)) environment PUBLIC_PORT, project.getProperty(PUBLIC_PORT)

  String KUBERNETES = "ohara.it.k8s"
  if(project.hasProperty(KUBERNETES)) environment KUBERNETES, project.getProperty(KUBERNETES)
}
