/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"

/**
 * Noted: this module should NOT have any production code!!! by chia
 */
dependencies {
  /**
   * scala plugin complains that we don't put scala library in production scope... by chia
   */
  implementation libs.scala
  testImplementation libs.scalaLogging
  testImplementation libs.sprayJson
  testImplementation libs.kafkaConnectRuntime
  // our it env use postgresql
  testImplementation libs.postgresql
  testImplementation project(':ohara-common')
  testImplementation project(':ohara-client')
  testImplementation project(':ohara-kafka')
  testImplementation project(':ohara-configurator')
  testImplementation project(':ohara-connector')
  testImplementation project(':ohara-agent')
  testImplementation project(':ohara-testing-util')
  /**
   * The Hadoop use jersey 1.x, but the Kafka use jersey 2.x so jar conflict
   *
   * Solve running Kafka Connect mini cluster failed. OHARA-103
   */
  testImplementation (libs.hadoopCommon) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  testImplementation (libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation project(":ohara-testing-util").sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.junit
  testImplementation libs.sshd
  testImplementation libs.akkaStream
}

// Since ohara-it:TestStream need streamApp client jar, we add the jar to build folder
task includeStreamAppJar(dependsOn: ':ohara-streams:testJar', type: Copy){
  from tasks.getByPath(':ohara-streams:testJar')
  into "$buildDir/resources/test"
}

test {
  String DOCKER = "ohara.it.docker"
  if(project.hasProperty(DOCKER)) environment DOCKER, project.getProperty(DOCKER)

  // required by TestLoadCustomJarToWorkerCluster
  String PUBLIC_HOSTNAME= "ohara.it.hostname"
  if(project.hasProperty(PUBLIC_HOSTNAME)) environment PUBLIC_HOSTNAME, project.getProperty(PUBLIC_HOSTNAME)

  // required by TestLoadCustomJarToWorkerCluster
  String PUBLIC_PORT = "ohara.it.port"
  if(project.hasProperty(PUBLIC_PORT)) environment PUBLIC_PORT, project.getProperty(PUBLIC_PORT)

  String KUBERNETES = "ohara.it.k8s"
  if(project.hasProperty(KUBERNETES)) environment KUBERNETES, project.getProperty(KUBERNETES)

  String KUBERNETES_NODE_NAME = "ohara.it.k8s.nodename"
  if(project.hasProperty(KUBERNETES_NODE_NAME)) environment KUBERNETES_NODE_NAME, project.getProperty(KUBERNETES_NODE_NAME)
}

test.dependsOn includeStreamAppJar