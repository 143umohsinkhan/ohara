/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: 'java-library-distribution'
dependencies {
  //----------------------[ohara modules]----------------------//
  compile project(':ohara-testing-util')
  compile project(':ohara-common')
  compile project(':ohara-client')
  compile project(':ohara-kafka')
  compile project(':ohara-connector')
  compile project(':ohara-configurator')
  compile project(':ohara-agent')
  //--------------------------[other]--------------------------//
  compile libs.kafkaClient
  /**
   * The Hadoop use jersey 1.x, but the Kafka use jersey 2.x so jar conflict
   *
   * Solve running Kafka Connect mini cluster failed. OHARA-103
   */
  compile (libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  compile libs.scalaLogging
  compile libs.scala
  compile libs.akkaStream
  compile libs.sprayJson
  compile libs.akkaSlf4j
  //--------------------------[tests]--------------------------//
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.junit
}

distributions {
  main {
    baseName = "ohara"
    contents {
      // TODO: we can't exclude the jar from root of project since it also reject the jar in lib folder... by chia
      // exclude "ohara-demo-${version}.jar"
      into("conf") {
        // ref to root module
        from { "$projectDir/../conf" }
      }
      into("bin") {
        // ref to root module
        from { "$projectDir/../bin" }
        fileMode 0755
      }
      into("lib") {
        from { "$projectDir/build/libs/ohara-demo-${version}.jar" }
      }
    }
  }
}

/**
 * run ftp server
 */
task runFtp(type: JavaExec, dependsOn: 'classes') {
  classpath = sourceSets.main.runtimeClasspath
  main = "com.island.ohara.demo.Ftp"

  def inputs = []
  if(project.hasProperty('user')) {
    inputs << "--user"
    inputs << project.getProperty("user")
  }
  if(project.hasProperty('password')) {
    inputs << "--password"
    inputs << project.getProperty("password")
  }
  if(project.hasProperty('controlPort')) {
    inputs << "--controlPort"
    inputs << project.getProperty("controlPort")
  }
  if(project.hasProperty('dataPorts')) {
    inputs << "--dataPorts"
    inputs << project.getProperty("dataPorts")
  }
  if(project.hasProperty('ttl')) {
    inputs << "--ttl"
    inputs << project.getProperty("ttl")
  }
  args = inputs
}

/**
 * run database
 */
task runDatabase(type: JavaExec, dependsOn: 'classes') {
  classpath = sourceSets.main.runtimeClasspath
  main = "com.island.ohara.demo.MySql"

  def inputs = []
  if(project.hasProperty('user')) {
    inputs << "--user"
    inputs << project.getProperty("user")
  }
  if(project.hasProperty('password')) {
    inputs << "--password"
    inputs << project.getProperty("password")
  }
  if(project.hasProperty('port')) {
    inputs << "--port"
    inputs << project.getProperty("port")
  }
  if(project.hasProperty('dbName')) {
    inputs << "--dbName"
    inputs << project.getProperty("dbName")
  }
  if(project.hasProperty('ttl')) {
    inputs << "--ttl"
    inputs << project.getProperty("ttl")
  }
  args = inputs
}

/**
 * run backend
 */
task runBackend(type: JavaExec, dependsOn: 'classes') {
  classpath = sourceSets.main.runtimeClasspath
  main = "com.island.ohara.demo.Backend"
  def configuratorPort = 0
  if(project.hasProperty('configuratorPort')) configuratorPort = "${project.getProperty('configuratorPort')}"
  def zkPort = 0
  if(project.hasProperty('zkPort')) zkPort = "${project.getProperty('zkPort')}"
  def brokersPort = "0,0,0"
  if(project.hasProperty('brokersPort')) brokersPort = "${project.getProperty('brokersPort')}"
  def workersPort = "0,0,0"
  if(project.hasProperty('workersPort')) workersPort = "${project.getProperty('workersPort')}"
  def dbPort = 0
  if(project.hasProperty('dbPort')) dbPort = "${project.getProperty('dbPort')}"
  def ftpPort = 0
  if(project.hasProperty('ftpPort')) ftpPort = "${project.getProperty('ftpPort')}"
  def ftpDataPort = 0
  if(project.hasProperty('ftpDataPort')) ftpDataPort = "${project.getProperty('ftpDataPort')}"
  args = Arrays.asList("--configuratorPort", configuratorPort,
    "--zkPort", zkPort,
    "--brokersPort", brokersPort,
    "--workersPort", workersPort,
    "--dbPort", dbPort,
    "--ftpPort", ftpPort,
    "--ftpDataPort", ftpDataPort)
}