apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: 'java-library-distribution'
dependencies {
  //----------------------[ohara modules]----------------------//
  compile project(':ohara-testing-util')
  compile project(':ohara-common')
  compile project(':ohara-client')
  compile project(':ohara-kafka')
  compile project(':ohara-hdfs-connector')
  compile project(':ohara-ftp-connector')
  compile project(':ohara-jdbc-connector')
  compile project(':ohara-perf-connector')
  compile project(':ohara-configurator')
  //--------------------------[other]--------------------------//
  compile libs.kafkaClient
  /**
   * The Hadoop use jersey 1.x, but the Kafka use jersey 2.x so jar conflict
   *
   * Solve running Kafka Connect mini cluster failed. OHARA-103
   */
  compile (libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  compile libs.scalaLogging
  compile libs.scala
  compile libs.akkaStream
  compile libs.sprayJson
  compile libs.akkaSlf4j
  //--------------------------[tests]--------------------------//
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.junit
}

distributions {
  main {
    baseName = "ohara"
    contents {
      // TODO: we can't exclude the jar from root of project since it also reject the jar in lib folder... by chia
      // exclude "ohara-demo-${version}.jar"
      into("conf") {
        // ref to root module
        from { "$projectDir/../conf" }
      }
      into("bin") {
        // ref to root module
        from { "$projectDir/../bin" }
        fileMode 0755
      }
      into("lib") {
        from { "$projectDir/build/libs/ohara-demo-${version}.jar" }
      }
    }
  }
}

/**
 * run backend
 */
task runBackend(type: JavaExec, dependsOn: 'classes') {
  classpath = sourceSets.main.runtimeClasspath
  main = "com.island.ohara.demo.Backend"
  def configuratorPort = 0
  if(project.hasProperty('configuratorPort')) configuratorPort = "${project.getProperty('configuratorPort')}"
  def zkPort = 0
  if(project.hasProperty('zkPort')) zkPort = "${project.getProperty('zkPort')}"
  def brokersPort = "0,0,0"
  if(project.hasProperty('brokersPort')) brokersPort = "${project.getProperty('brokersPort')}"
  def workersPort = "0,0,0"
  if(project.hasProperty('workersPort')) workersPort = "${project.getProperty('workersPort')}"
  def dbPort = 0
  if(project.hasProperty('dbPort')) dbPort = "${project.getProperty('dbPort')}"
  def ftpPort = 0
  if(project.hasProperty('ftpPort')) ftpPort = "${project.getProperty('ftpPort')}"
  def ftpDataPort = 0
  if(project.hasProperty('ftpDataPort')) ftpDataPort = "${project.getProperty('ftpDataPort')}"
  args = Arrays.asList("--configuratorPort", configuratorPort,
    "--zkPort", zkPort,
    "--brokersPort", brokersPort,
    "--workersPort", workersPort,
    "--dbPort", dbPort,
    "--ftpPort", ftpPort,
    "--ftpDataPort", ftpDataPort)
}