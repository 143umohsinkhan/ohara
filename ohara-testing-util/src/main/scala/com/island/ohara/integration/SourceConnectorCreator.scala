package com.island.ohara.integration

import com.island.ohara.rest.RestResponse
import org.apache.kafka.connect.source.SourceConnector

/**
  * Used to config and run the source connector.
  */
trait SourceConnectorCreator {

  /**
    * config the converter be org.apache.kafka.connect.converters.ByteArrayConverter. It is useful if the data in topic
    * your connector want to take is byte array and is generated by kafka producer. For example, the source is RowSourceConnector,
    * and the target is RowConsumer.
    *
    * @return this one
    */
  def disableConverter: SourceConnectorCreator

  /**
    * set the connector name. It should be a unique name.
    * @param name connector name
    * @return this one
    */
  def name(name: String): SourceConnectorCreator

  /**
    * set the connector class. The class must be loaded in class loader otherwise it will fail to create the connector.
    * @param clz connector class
    * @return this one
    */
  def connectorClass(clz: Class[_ <: SourceConnector]): SourceConnectorCreator

  /**
    * set the topic in which you have interest.
    * @param topicName topic
    * @return this one
    */
  def topic(topicName: String): SourceConnectorCreator

  /**
    * the max number of source task you want to create
    * @param taskMax max number of source task
    * @return this one
    */
  def taskNumber(taskMax: Int): SourceConnectorCreator

  /**
    * extra config passed to source connector. This config is optional.
    * @param config config
    * @return this one
    */
  def config(config: Map[String, String]): SourceConnectorCreator

  /**
    * send the request to create the source connector.
    * @return this one
    */
  def run(): RestResponse
}
