apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: 'scala'

dependencies {
  compile project(':ohara-common')
  compile project(':ohara-kafka')
  /**
   * The Hadoop use jersey 1.x, but the Kafka use jersey 2.x so jar conflict
   *
   * Solve running Kafka Connect mini cluster failed. OHARA-103
   */
  compile (libs.hadoopCommon) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  compile (libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  compile libs.kafkaClient
  compile libs.kafkaConnectFile
  compile libs.kafkaConnectRuntime
  compile libs.scala
  compile libs.zookeeper
  compile libs.scalaLogging
  compile libs.slf4jApi
  compile libs.slf4jlog4j
  compile libs.sprayJson
  testCompile project(':ohara-testing-util')
  testCompile project(":ohara-testing-util").sourceSets.test.output
  testCompile project(":ohara-common").sourceSets.test.output
  testCompile libs.scalatest
  testCompile libs.mockito
  testCompile libs.junit
}

/**
 * run a configurator based on kafka cluster
 */
task runConfigurator(type: JavaExec, dependsOn: 'classes') {
  description 'run a configurator. You can use -Phost and -Pport to change the address and port of configurator.' +
          'Also, you can assign -Pbrokers, -Pworkers, -Ptopic, -Ppartitions, and -Preplications to run the configurator on truly kafka'
  String hostname = "localhost"
  if(project.hasProperty('host')) {
    hostname = "${project.getProperty('host')}"
  }
  String port = 0
  if(project.hasProperty('port')) {
    port = "${project.getProperty('port')}"
  }
  classpath = sourceSets.main.runtimeClasspath
  main = "com.island.ohara.configurator.Configurator"
  String brokers = "none"
  if(project.hasProperty('brokers')) {
    brokers = "${project.getProperty('brokers')}"
  }
  String topic = "test-topic"
  if(project.hasProperty('topic')) {
    topic = "${project.getProperty('topic')}"
  }
  String partitions = "1"
  if(project.hasProperty('partitions')) {
    partitions = "${project.getProperty('partitions')}"
  }
  String replications = "1"
  if(project.hasProperty('replications')) {
    replications = "${project.getProperty('replications')}"
  }
  String workers = "none"
  if(project.hasProperty('workers')) {
    workers = "${project.getProperty('workers')}"
  }
  args = Arrays.asList("--hostname", hostname, "--port", port, "--brokers", brokers, "--topic", topic,
          "--partitions", partitions, "--replications", replications, "--workers", workers)

}

