plugins {
  id "com.diffplug.gradle.spotless" version "3.15.0"
}

allprojects {
  repositories {
    mavenCentral()
    maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    maven { url "https://dl.bintray.com/cakesolutions/maven/" }
  }
}

ext {
  userMaxForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : null
}

subprojects {
  if (it.name != 'ohara-manager') {
    if (it.name == 'ohara-common')
      apply plugin: 'java'
    else if (it.name == 'ohara-testing-util') {
      apply plugin: 'scala'
      apply plugin: 'java'

    } else apply plugin: 'scala'
    test {
      maxParallelForks = userMaxForks ?: Runtime.runtime.availableProcessors()
      minHeapSize = "256m"
      maxHeapSize = "4096m"
      testLogging {
        events = ["passed", "skipped", "failed"]
      }
    }
  }

  // The *-tests.jar of ohara-assembly is useless so we exclude the ohara-assembly
  if (it.name != 'ohara-assembly' && it.name != 'ohara-manager') {
    configurations {
      tests.extendsFrom archives
    }
    task testJar(type: Jar, dependsOn: testClasses) {
      classifier = 'tests'
      from sourceSets.test.output
    }
    artifacts {
      archives testJar
    }
  }

  // All sub-projects have applied the scala checkstyle.
  if (it.name != 'ohara-manager') {
    apply plugin: "com.diffplug.gradle.spotless"
    if (it.name == 'ohara-common' || it.name == 'ohara-testing-util') {
      spotless {
        java {
          googleJavaFormat()
        }
      }
    }else if(it.name == 'ohara-kafka'){
      spotless {
        java {
          googleJavaFormat()
        }
        scala {
          // DON'T change the scalafmt version since the rules may be changed in newer version.
          scalafmt("1.5.1").configFile("$rootDir/.scalafmt.conf")
        }
      }
    } else {
      spotless {
        scala {
          // DON'T change the scalafmt version since the rules may be changed in newer version.
          scalafmt("1.5.1").configFile("$rootDir/.scalafmt.conf")
        }
      }
    }
  }

  // we put some test case in ohara-assembly so those compiler options should be added to ohara-assembly also.
  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
      // Scala Compiler Options
      // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/StandardScalaSettings.scala
      // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala
      "-deprecation",
      "-unchecked",
      "-encoding", "utf8",
      "-Xlog-reflective-calls",
      "-feature",
      "-language:postfixOps",
      "-language:implicitConversions",
      "-language:existentials",
      "-Xlint:by-name-right-associative",
      "-Xlint:delayedinit-select",
      "-Xlint:doc-detached",
      "-Xlint:missing-interpolator",
      "-Xlint:nullary-override",
      "-Xlint:nullary-unit",
      "-Xlint:option-implicit",
      "-Xlint:package-object-classes",
      "-Xlint:poly-implicit-overload",
      "-Xlint:private-shadow",
      "-Xlint:stars-align",
      "-Xlint:type-parameter-shadow",
      "-Xlint:unsound-match",
      "-target:jvm-1.8",
      "-explaintypes",
      "-feature",
      "-unchecked",
      "-Xlint",
      "-Ywarn-dead-code",
      // in order to enable SAM in scala 2.11.
      // see https://github.com/scala/scala/pull/3037
      // TODO: remove this flag after we are in scala 2.12.  by chia
      "-Xexperimental"
    ]

    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
      jvmArgs = ['-XX:MaxMetaspaceSize=512m']
    }
  }
}


