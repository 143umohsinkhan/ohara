/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.diffplug.spotless:spotless-plugin-gradle:3.26.0"
    classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
    classpath 'com.novoda:bintray-release:0.9.1'
    classpath "org.gradle:test-retry-gradle-plugin:1.1.0"
  }
}

apply plugin: "com.diffplug.gradle.spotless"
apply plugin: "com.github.hierynomus.license"

def needHeaders() {
  return [
    fileTree(dir: ".").include("**/*.java"),
    fileTree(dir: ".").include("**/*.scala"),
    fileTree(dir: ".").include("**/*.sh"),
    fileTree(dir: ".").include("**/*.properties"),
    fileTree(dir: ".").include("**/*.js"),
    fileTree(dir: ".").include("**/*.dockerfile"),
    fileTree(dir: ".").include("**/*.conf"),
    fileTree(dir: ".").include("**/*.gradle"),
    fileTree(dir: ".").include("**/*.yaml"),
    fileTree(dir: ".").include("**/*.yml"),
    fileTree(dir: ".").include("**/*.rst"),
    fileTree(dir: ".").include("**/*.py")
  ]
}

task licenseApply(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
  source(needHeaders())
}

task licenseTest(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
  source(needHeaders())
}

license {
  header = file("$rootDir/checkstyle/apacheV2.header")
  strictCheck true
  // VersionUtils.java is generated at runtime and its source code isn't public. Hence, we don't add header to it.
  excludes(["**/VersionUtils.java",
            ".gradle",
            ".git",
            ".idea",
            "**/target",
            "**/build",
            "ohara-manager/**/node_modules",
            "ohara-manager/**/coverage",
            "docs/**/_include",
            // we have yet to exercise gradlew on project
            "gradle/wrapper/gradle-wrapper.properties"
  ])
  // http://code.mycila.com/license-maven-plugin/#supported-comment-types
  mapping {
    js='JAVADOC_STYLE'
    scala='JAVADOC_STYLE'
    gradle='JAVADOC_STYLE'
    dockerfile='SCRIPT_STYLE'
    conf='SCRIPT_STYLE'
    yaml='SCRIPT_STYLE'
    yml='SCRIPT_STYLE'
    rst='RESTRUCTUREDTEXT_STYLE'
    py='SCRIPT_STYLE'
  }
  // NOTED: we use spotless to format our code so the format of header must be valid to spotless!
  headerDefinitions {
    javadoc_style {
      firstLine = "/*"
      beforeEachLine = " * "
      // joshua's wish...
      endLine   = " */EOL"
      firstLineDetectionPattern = "/*"
      lastLineDetectionPattern  = " */"
      allowBlankLines = false
      isMultiline = true
    }

    reStructuredText_style {
      firstLine = ".."
      beforeEachLine = ".. "
      endLine = "..EOL"
      firstLineDetectionPattern = "##.*\$"
      lastLineDetectionPattern  = "##.*\$"
      allowBlankLines = false
      isMultiline = false
    }
  }
}

check {
  dependsOn licenseTest
}

static def isJavaModule(String moduleName) {
  return moduleName == 'ohara-common' ||
          moduleName == 'ohara-metrics' ||
          moduleName == 'ohara-kafka' ||
          moduleName == 'ohara-testing-util' ||
          moduleName == 'ohara-streams'
}

subprojects {
  // -------------------------------------------------[repositories]-------------------------------------------------//
  if (it.name != 'ohara-manager') {
    repositories {
      mavenCentral()
    }
  }

  // -------------------------------------------------[java/scala plugin]-------------------------------------------------//
  if (it.name != 'ohara-manager') {
    if (isJavaModule(it.name)) {
      apply plugin: 'java'
      sourceCompatibility = 1.8
      targetCompatibility = 1.8
    }
    else apply plugin: 'scala'
  }

  // -------------------------------------------------[jUnit configs]-------------------------------------------------//
  if (it.name != 'ohara-manager') {
    apply plugin: 'org.gradle.test-retry'

    int numberOfForks = it.name == 'ohara-it' ? 1 :
            project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() :
                    Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)

    // the retries are disabled by default and it is up to jenkins.
    int numberOfRetries = project.hasProperty('maxTestRetries') ? maxTestRetries.toInteger() : 0
    int numberOfFailures = project.hasProperty('maxTestFailures') ? maxTestFailures.toInteger() : 1

    test {
      retry {
        maxRetries = numberOfRetries
        maxFailures = numberOfFailures
      }
      maxParallelForks = numberOfForks
      // make isolation for tests. It may be expensive but stability is first choice.
      forkEvery = 1
      minHeapSize = "256m"
      maxHeapSize = "4096m"
      testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
      }
    }
  }

  // -------------------------------------------------[docs/tests/sources jar]-------------------------------------------------//
  if (it.name != 'ohara-manager') {
    configurations {
      tests.extendsFrom archives
    }

    task testJar(type: Jar, dependsOn: testClasses) {
      classifier 'tests'
      from sourceSets.test.output
    }

    artifacts {
      archives testJar
    }
  }

  // -------------------------------------------------[publication]-------------------------------------------------//
  if (it.name != 'ohara-manager' && it.name != 'ohara-it') {
    String moduleName = it.name
    apply plugin: 'com.novoda.bintray-release'

    publish {
      userOrg = property("userOrg")
      repoName = property("repoName")
      groupId = property("group")
      artifactId = moduleName
      publishVersion = project.version
      desc = property("desc")
      website = property("website")
    }

    // this is a hacky workaround that we have to override the internal variables in order to deploy the sources/tests jar ... by chia
    // see https://github.com/novoda/bintray-release/blob/master/plugin/core/src/main/groovy/com/novoda/gradle/release/MavenPublicationAttachments.groovy
    // for the internal variables
    tasks.whenTaskAdded { Task task ->
      if (name == "generateSourcesJarForMavenPublication") {
        from sourceSets.main.allSource
      }
      if (name == "generateJavadocsJarForMavenPublication") {
        from "$rootDir/LICENSE"
        if (isJavaModule(moduleName)) from javadoc.destinationDir
        else {
          dependsOn scaladoc
          from scaladoc.destinationDir
          // This plugin make hardcode on postfix of docs jar...
          // this is a workaround of changing the final name of uploaded docs jar
          doLast {
            ((Jar) task).classifier = 'scaladoc'
          }
        }
      }
    }
  }

  // -------------------------------------------------[java/scala code formatter]-------------------------------------------------//
  if (it.name != 'ohara-manager') {
    apply plugin: "com.diffplug.gradle.spotless"
    spotless {
      java {
        target project.fileTree(project.rootDir) {
          include '**/*.java'
          // VersionUtils is a generated class
          exclude '**/VersionUtils.java'
        }
        googleJavaFormat()
        removeUnusedImports()
      }
      scala {
        // DON'T change the scalafmt version since the rules may be changed in newer version.
        scalafmt("2.2.2").configFile("$rootDir/checkstyle/.scalafmt.conf")
      }
    }
  }

  // -------------------------------------------------[java compiler configs]-------------------------------------------------//
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:all", "-Werror"]
  }

  // -------------------------------------------------[scala compiler configs]-------------------------------------------------//
  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
      // Scala Compiler Options
      // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/StandardScalaSettings.scala
      // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala
      "-deprecation",
      "-unchecked",
      "-encoding", "utf8",
      "-Xlog-reflective-calls",
      "-feature",
      "-language:postfixOps",
      "-language:implicitConversions",
      "-language:existentials",
      "-target:jvm-1.8",
      "-explaintypes",
      "-feature",
      "-unchecked",
      // -Xlint enables all -Xlint:xxx checks.
      // see https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/Warnings.scala#L60
      "-Xlint",
      "-Ywarn-dead-code",
      "-Ywarn-unused-import",
      "-Xfatal-warnings"
    ]

    // -------------------------------------------------[gradle configs]-------------------------------------------------//
    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
      jvmArgs = ['-XX:MaxMetaspaceSize=512m']
    }
  }
}


