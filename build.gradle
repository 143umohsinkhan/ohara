allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://repository.cloudera.com/artifactory/cloudera-repos/"
    }
    maven {
      url "https://dl.bintray.com/cakesolutions/maven/"
    }
  }
}

subprojects {
  version = '0.1-SNAPSHOT'
  if (it.name != 'ohara-assembly') {
    apply plugin: 'scala'

    configurations {
      tests.extendsFrom archives
    }
    task testJar(type: Jar, dependsOn: testClasses) {
      classifier = 'tests'
      from sourceSets.test.output
    }
    artifacts {
      archives testJar
    }
  }

  // we put some test case in ohara-assembly so those compiler options should be added to ohara-assembly also.
  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
            // Scala Compiler Options
            // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/StandardScalaSettings.scala
            // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala
            "-deprecation",
            "-unchecked",
            "-encoding", "utf8",
            "-Xlog-reflective-calls",
            "-feature",
            "-language:postfixOps",
            "-language:implicitConversions",
            "-language:existentials",
            "-Xlint:by-name-right-associative",
            "-Xlint:delayedinit-select",
            "-Xlint:doc-detached",
            "-Xlint:missing-interpolator",
            "-Xlint:nullary-override",
            "-Xlint:nullary-unit",
            "-Xlint:option-implicit",
            "-Xlint:package-object-classes",
            "-Xlint:poly-implicit-overload",
            "-Xlint:private-shadow",
            "-Xlint:stars-align",
            "-Xlint:type-parameter-shadow",
            "-Xlint:unsound-match",
            "-target:jvm-1.8",
            "-explaintypes",
            "-feature",
            "-unchecked",
            "-Xlint",
            "-Ywarn-dead-code",
            "-Ywarn-unused:implicits",
            "-Ywarn-unused:imports",
            "-Ywarn-unused:locals",
            "-Ywarn-unused:params",
            "-Ywarn-unused:patvars",
            "-Ywarn-unused:privates",
            "-Ywarn-value-discard"
    ]

    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
      jvmArgs = ['-XX:MaxMetaspaceSize=512m']
    }
  }
}


