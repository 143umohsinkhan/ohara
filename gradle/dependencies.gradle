ext {
  versions = [:]
  libs = [:]
}
if (project.hasProperty('cdh')) {
  versions["zookeeper"] = "3.4.5-cdh5.14.0"
  versions["kafka"] = "0.11.0-kafka-3.0.0"
} else {
  versions["zookeeper"] = project.hasProperty('zookeeper.version') ? project.properties['zookeeper.version'] : "3.4.10"
  versions["kafka"] = project.hasProperty('kafka.version') ? project.properties['kafka.version'] : "1.0.1"
}
versions["mockito"] = project.hasProperty('mockito.version') ? project.properties['mockito.version'] : "1.10.19"
versions["scala"] = project.hasProperty('scala.version') ? project.properties['scala.version'] : "2.12.4"
versions["akka"] = project.hasProperty('akka.version') ? project.properties['akka.version'] : "2.5.12"
versions["akkaHttp"] = project.hasProperty('akka.http.version') ? project.properties['akka.http.version'] : "10.1.1"
versions["kafkaScalaWrapper"] = project.hasProperty('kafka.scala.wrapper') ? project.properties['kafka.scala.wrapper'] : "1.0.0"
versions["scalatest"] = project.hasProperty('scalatest.version') ? project.properties['scalatest.version'] : "3.0.5"
versions["junit"] = project.hasProperty('junit.version') ? project.properties['junit.version'] : "4.12"
versions["slf4j"] = project.hasProperty('slf4j.version') ? project.properties['slf4j.version'] : "1.7.25"
versions["scalaLogging"] = project.hasProperty('scalaLogging.version') ? project.properties['scalaLogging.version'] : "3.8.0"
versions["typesafeConfig"] = project.hasProperty('typesafeConfig.version') ? project.properties['typesafeConfig.version'] : "1.3.3"
versions["apacheHttpClient"] = project.hasProperty('apacheHttpClient.version') ? project.properties['apacheHttpClient.version'] : "4.5.5"
libs += [
  kafkaCore: "org.apache.kafka:kafka_2.12:$versions.kafka",
  kafkaClient: "org.apache.kafka:kafka-clients:$versions.kafka",
  kafkaConnectApi: "org.apache.kafka:connect-api:$versions.kafka",
  kafkaConnectFile: "org.apache.kafka:connect-file:$versions.kafka",
  kafkaConnectRuntime: "org.apache.kafka:connect-runtime:$versions.kafka",
  kafkaConnectJson: "org.apache.kafka:connect-json:$versions.kafka",
  akkaActor: "com.typesafe.akka:akka-actor_2.12:$versions.akka",
  akkaStream: "com.typesafe.akka:akka-stream_2.12:$versions.akka",
  akkaHttp: "com.typesafe.akka:akka-http_2.12:$versions.akkaHttp",
  sprayJson: "com.typesafe.akka:akka-http-spray-json_2.12:$versions.akkaHttp",
  akkaSlf4j: "com.typesafe.akka:akka-slf4j_2.12:$versions.akka",
  kafkaScalaWrapper: "net.cakesolutions:scala-kafka-client_2.12:$versions.kafkaScalaWrapper",
  scala: "org.scala-lang:scala-library:$versions.scala",
  slf4jApi: "org.slf4j:slf4j-api:$versions.slf4j",
  slf4jlog4j: "org.slf4j:slf4j-log4j12:$versions.slf4j",
  zookeeper: "org.apache.zookeeper:zookeeper:$versions.zookeeper",
  scalatest: "org.scalatest:scalatest_2.12:$versions.scalatest",
  akkaHttpTestKit: "com.typesafe.akka:akka-http-testkit_2.12:$versions.akkaHttp",
  akkaTestKit: "com.typesafe.akka:akka-testkit_2.12:$versions.akka",
  akkaStreamTestKit: "com.typesafe.akka:akka-stream-testkit_2.12:$versions.akka",
  scalaLogging: "com.typesafe.scala-logging:scala-logging_2.12:$versions.scalaLogging",
  mockito: "org.mockito:mockito-all:$versions.mockito",
  junit: "junit:junit:$versions.junit",
  typesafeConfig: "com.typesafe:config:$versions.typesafeConfig",
  apacheHttpClient: "org.apache.httpcomponents:httpclient:$versions.apacheHttpClient",
]